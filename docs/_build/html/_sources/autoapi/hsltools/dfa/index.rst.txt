:mod:`hsltools.dfa`
===================

.. py:module:: hsltools.dfa


Module Contents
---------------


.. function:: calc_rms(x, scale)

   windowed Root Mean Square (RMS) with linear detrending.

   Args:
   -----
     *x* : numpy.array
       one dimensional data vector
     *scale* : int
       length of the window in which RMS will be calculaed
   Returns:
   --------
     *rms* : numpy.array
       RMS data in each window with length len(x)//scale


.. function:: dfa(x, scale_lim=[5, 9], scale_dens=0.25, show=False)

   Detrended Fluctuation Analysis - measures power law scaling coefficient
   of the given signal *x*.
   More details about the algorithm you can find e.g. here:
   Hardstone, R. et al. Detrended fluctuation analysis: A scale-free
   view on neuronal oscillations, (2012).
   Args:
   -----
     *x* : numpy.array
       one dimensional data vector
     *scale_lim* = [5,9] : list of length 2
       boundaries of the scale, where scale means windows among which RMS
       is calculated. Numbers from list are exponents of 2 to the power
       of X, eg. [5,9] is in fact [2**5, 2**9].
       You can think of it that if your signal is sampled with F_s = 128 Hz,
       then the lowest considered scale would be 2**5/128 = 32/128 = 0.25,
       so 250 ms.
     *scale_dens* = 0.25 : float
       density of scale divisions, eg. for 0.25 we get 2**[5, 5.25, 5.5, ... ]
     *show* = False
       if True it shows matplotlib log-log plot.
   Returns:
   --------
     *scales* : numpy.array
       vector of scales (x axis)
     *fluct* : numpy.array
       fluctuation function values (y axis)
     *alpha* : float
       estimation of DFA exponent


.. data:: n
   :annotation: = 1000

   

